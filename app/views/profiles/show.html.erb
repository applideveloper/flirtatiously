

Username: <%= @profile.user.username %>
<br>

<%= current_user. calculate_percentages(@profile.user) %>

<br>

<% ["sex", "sexual_orientation", "body_type", "smokes", "drinks", "drugs", "religion", "sign", "education", "job", "offspring", "pets", "description", "likes"].each do |descriptor| %>

<%= descriptor.capitalize %>: <%= (@profile[descriptor].nil?) ? "--" : @profile[descriptor] %><br>


<% end %>

<% if current_user.likes?(@profile.user) %>
	<% if @profile.user.likes?(current_user) %>
	<b> You guys both like each other!</b>
	<% else %>
	<b> You've liked this user already. Let's hope they like you back. </b>
	<% end %>
<% else %>
<br>
<%= button_to "Like User", like_user_url(@profile.user_id), method: :post %>

<% end %>

<br>

<%= link_to "Message User", new_user_message_url(@profile.user_id) %>

<br>

Questions:

<% @other_user_responses.each do |other_response| %>
<p>
<%= other_response.question_text %><br>

<% current_user_response = find_response(other_response.question_id, @current_user_responses) %>

<% if current_user_response.nil? %>

Answer question <%= other_response.question_id %> to see their answer.

<% else %>

His/her response: <%= other_response.answer_text%> <b><%= "UNACCEPTABLE" if is_unacceptable?(other_response, @current_user_acceptables) %></b>
Your response: <%= current_user_response.answer_text %><b> <%= "UNACCEPTABLE" if is_unacceptable?(current_user_response, @other_user_acceptables) %></b>

<% end %>

<!-- is_unacceptable?(response, acceptable_responses) -->
<p>

<% end %>


<!-- @current_user_responses = Question.get_responses(current_user.id)

@current_user_acceptables = Question.get_acceptable_responses(current_user.id)

@other_user_responses = Question.get_responses(other_user_id)

@other_user_acceptables = Question.get_acceptable_responses(other_user_id) -->

<!-- def self.get_responses(user_id)
  return Question.joins("INNER JOIN answer_choices ON questions.id = answer_choices.question_id INNER JOIN responses ON answer_choices.id = responses.answer_choice_id").select("questions.id AS question_id, questions.text AS question_text, answer_choices.id AS answer_id, answer_choices.text AS answer_text").where("responses.user_id = ?", user_id)


  # Question.joins("LEFT OUTER JOIN responses ON responses.question_id = questions.id LEFT OUTER JOIN acceptable_responses ON responses.question_id = acceptable_responses.question_id").select("questions.id AS question_id, questions.text AS question_text, answers.id AS answer_id, answers.text AS answer_text").where("responses.user_id = ?", user_id)
  #


end

def self.get_acceptable_responses(user_id)
  return Question.joins("JOIN answer_choices ON questions.id = answer_choices.question_id INNER JOIN acceptable_responses ON acceptable_responses.answer_choice_id = answer_choices.id").select("questions.id AS question_id, acceptable_responses.answer_choice_id AS answer_id, acceptable_responses.importance AS importance").where("acceptable_responses.user_id = ?", user_id)

end -->



<br>


<!-- questions.id AS question_id,
    questions.text AS question_text,
    other_user_answer_choices.text AS other_user_answer_text,
    other_user_answer_choices.id AS other_user_answer_id,
    current_user_answer_choices.text AS current_user_answer_text,
    current_user_answer_choices.id AS current_user_answer_id -->

