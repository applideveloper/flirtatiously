"that" in routes will have the items. It will be in the attributes, e.g. "that.tasks"

"tasks" is initialized in the top-level Todo code. So that "that.tasks" is the tasks.
When you call a top-level view of the View, you carry in the "tasks" as the collection..

$el is the default blank div element for you to add content to #render cmethod.

caller that requests render will isnert $el to DOM when ready.

is $rootEl the main body? --- no, it seems like it's what will be changed.


these are templates:
/template/#{collection_name}/{#controller_action}.jst.ejs
for the views in javascripts/views


FORMAT OF A VIEW:

			// TD.Views.TaskDetailView = Backbone.View.extend({
			//   render: function () {
			//     var that = this;
			// 
			//     var renderedContent = JST["tasks/detail"]({
			//       task: that.model
			//     });
			// 
			//     that.$el.html(renderedContent);
			//     return that;
			//   }
			// });
			
			
			Can also throw in a function alongside render:
			
			
			submit: function() {
				console.log("Blah blah");
				}
				
			}

			
			
Model is analogous to ActiveRecord::Base


Adding a model: 

			// app/assets/javascripts/models/task.js
			TD.Models.Task = Backbone.Model.extend({
			  // add model methods here; we have none to add right now
			});

			// app/assets/javascripts/collections/tasks.js
			TD.Collections.Tasks = Backbone.Collection.extend({
			  model: TD.Models.Task
			});
			

Collection#get, which returns the model object with the matching id. (e.g. that.tasks.get(id))

 we should use the Model#escape to get the value of an attribute and escape it for safe HTML insertion


		<!-- app/assets/templates/tasks/list.jst.ejs -->
		<ul>
		  <% tasks.each(function (task) { %>
		    <li class="task">
		      <a href="#/tasks/<%= task.escape("id") %>">
		        <%= task.escape("title")%>
		      </a>
		    </li>
		  <% }); %>
		</ul>
		
		
Submit function for New View

		submit: function (event) {
	    var that = this;

	    var formData = $(event.currentTarget).serializeJSON();
	    var task = new TD.Models.Task(formData.task);

	    that.collection.add(task);
	    Backbone.history.navigate("#/");
	  }
	
	
Omniaut