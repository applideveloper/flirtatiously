REQUIRED:
-Edit Responses (checkboxes hard as fucc)
-Install on Heroku
inbox/sent
-Figure out how to have different CSS for different views


Tuesday first off:
-Install on Heroku
-Make sure can't talk to self, can't see themselves in online profile.
-new messages shows message history, at least 5 messages.

-Have main bar at top of page, but smaller one after its there.
-Have bar at the bottom


AFTER:
-Display how many unread messages there are.

Controller/views: update_answer, ne question, create question, destroy profile.
Status / post one. / newsfeed.
Search Prefs: straight/gay/bi girls/guys, age range, range,
-should i delete the response controller?
Zip code.

-notification on new messages.
-hover over profile to edit. like click on.
-paperclip
-

BIG PART:
make WYSWIG editor for profile. // ContentEdigatable and JQueryUI

LATER:
-status messages.
-click to edit
-last online
Answer random question -- if done, say no more questions!
-Add validations.
-Live chat.   / gem pusher
-Ethnicity box.
-Action_Mailer
-Omniauth
In questions: You've answered X of her questions.
-Sort questions
-she cares, i care, ihavent answered, categories, (ethics, sex, religion, lifestyles, data, with explanation)
-add explanation.

AJAX/Backbone / own API for consumption by Backbone
jquery UI: draggable/sortable


MONDAY FINISH;
-Calculate match/percentages - HOLY F- THIS WAS FRUSTRATRTING
Put user + profile creation as transaction.
Random question pop up



-Calculate matches/percentages
-Pop up question answer. -- random question that isnt answer.

-Write RSpec tests for all models
-Live chat



QUEASTIONS
-What is UJS?

-DMS menu + nav.



-Zip code.
-Picture upload with paperclip or filepicker.io
Omniauth


WHEN DONE:
UI for editing pretty profiles

-Action Mailer for authenticiation


answers - body : null, false


add_index "conversations", ['low-user-id', 'high-user-id'
]

profile - details - user_id - nullfalse

last_online




details

>>>    t.string   "sex"
    t.string   "sexual_orientation"
    t.string   "drugs"
    t.text     "description"
    >>>> ALREADY IN THERE

user
gender
orientation
birthday



user prefs
min_age
max_age
max_distance

user
zipcode - 33071

order("created_at DESC") LIMIT 8


module ApplicationHelper
def nice_time(timestamp)
   Time.at(timestamp).utc.strftime("%B %-d at %l:%M %P")
 end


require_current_user!
require_no_current_user

require_correct_user


dependent:destory on porfile, detail, photo, response


validates the user details
last_online from Time.now


===

min/max validations


add explanation to responses

 add_index "responses", ["user_id", "question_id"],

